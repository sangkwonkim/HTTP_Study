// HTTP 헤더
//     일반 헤더
//     용도
//         header-filed = fieldName: OWS fieldValue OWS > OWS(띄어쓰기 허용)
//         HTTP 전송에 필요한 모든 부가정보가 담김
//             ex) 메세지 바디의 내용, 메세지 바디의 크기, 압축, 인증, 요청 클라이언트, 서버 정보, 캐시 관리 정보 등등
//         필요시 임의의 헤더 추가 가능
    
//     헤더 분류 RFC2616 - 과거
//         순서
//             Request/Response Headers
//             General Headers
//             Entity Headers
//             Message body
//         General 헤더 : 메세지 전체에 적용되는 정보
//         Request 헤더 : 요청 정보
//         Response 헤더 : 응답 정보
//         Entity 헤더 : 엔티티 바디 정보

//         HTTP 바디
//             메세지 본문은 엔티티 바디를 전달하는 데 사용
//             엔티티 바디는 요청이나 응답에 전달할 실제 데이터
//                 메세지 본문 안에 엔티티 바디를 담아 전송한다!
//             엔티티 헤더는 엔티티 바디의 데이터를 해석할 수 있는 정보 제공
//             ex) 데이터 유형, 데이터 길이, 압축 정보 등등
    
//     1999년 RFC2616 폐기
//     2014년 RFC7230 ~ 7235 등장
    
//     RFC723X 변화
//         엔티티 => 표현(Representation)
//         표현 = 표현 메타데이터 + 표현 데이터
//         순서
//             표현 헤더
//             표현 데이터
//         RFC7230 HTTP 바디
//             메세지 본문(페이로드)을 통해 표현 데이터 전달
//             표현은 요청이나 응답에서 전달할 실제 데이터
//             표현 헤더는 표현 데이터를 해석할 수 있는 정보 제공
//             * 표현 헤더는 표현 메타데이터와 페이로드 메세지를 구분해야 하지만 복잡해서 생략

//     추상적인 데이터를 클라이언트와 서버가 주고 받을 때 데이터를 표현하는 방법에 대해 나타낸다

//     표현헤더 > 전송, 응답 둘 다 사용
//         Content-Type : 표현 데이터의 형식 설명
//             미디어 타입, 문자 인코딩
//             ex) text/html; charset=UTF-8
//             application/json  > 기본이 UTF-8
//             image/png
//         Content-Encoding : 표현 데이터의 압축 방식
//             표현 데이터를 압축하기 위해 사용
//             데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가
//             데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 헤제
//             ex) gzip, deflate, identity(압축 안한다)
//         Content-Language : 표현 데이터의 자연 언어
//             ex) ko, en, en-US
//             => 클라이언트에서 언어 종류를 고르는 부분에서 사용할 수 있다
//         Content-Length : 표현 데이터의 길이
//             바이트 단위
//             Transfer-Encoding(전송 코딩)을 사용하면 Content-Length 사용하면 안됨

//     협상 헤더(콘텐츠 네고시에이션)
//     클라이언트가 선호하는 표현 요청 > 요청 시에만 사용

//         Accept : 클라이언트가 선호하는 미디어 타입 전달
//         Accept-Charset : 클라이언트가 선호하는 문자 인코딩
//         Accept-Encoding : 클라이언트가 선호하는 압축 인코딩
//         Accept-Language :  클라이언트가 선호하는 자연 언어
        
//         협상과 우선순위 
//             Quality Values(q) 값 사용
//             0 ~ 1 클수록 높은 우선 순위 > 생략하면 1
//             , 으로 구분하며, ;으로 값을 표현한다
//             Accept-Language
//                 ex) ko-KR,ko;q=0.9,en-US;q=0.8

//         협상과 우선순위2
//             구체적인 것이 우선
//             , 으로 구분하며, ;으로 구체적으로 표현한다
//             Accept: text/*, text/plain, text/plain;format=flowed, */*
//             1. text/plain;format=flowed
//             2. text/plain
//             3. text/*
//             4. */*

//         협상과 우선순위3
//             구체적인 것을 기준으로 미디어 타입을 맞춘다
//             Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, */*;q=0.5
//             text/html;level=1 > 1
//             text/html > 0.7
//             text/plain > 0.3
//             image/jpeg > 0.5
//             text/html;level=2 > 0.4
//             text/html;level=3 > 0.7
    
//     전송 방식 헤더
//         단순 전송
//             응답 시 Content-Length를 통해 컨텐츠 길이를 알려줌
//             > 단순히 요청하고 한 번에 다 받는 것
//         압축 전송
//             Content-Encoding 헤더 추가
//             컨텐츠를 압축해서 응답
//         분할 전송
//             Transfer-Encoding: chunked
//             응답 바디를 나누어서 전송(청크 별로 바이트 정보가 포함됨)
//             받는 대로 표현할 수 있다
//             Content-Length가 들어가면 안됨
//         범위 전송
//             Range, Content-Range
//             일부만 응답 받았을 때, 범위를 지정해서(Range) 요청해서 받을 수 있다(Content-Range)

//     일반 정보
//         From : 유저 에이전트의 이메일 정보
//             일반적으로 잘 사용되지 않음
//             검색 엔진 같은 곳에서 주로 사용
//             요청에서 사용

//         Referer : 이전 웹 페이지 주소
//             현재 요청된 페이지의 이전 웹 페이지 주소
//             A -> B로 이동하는 경우 B를 요청할 때 Referer: A 를 포함해서 요청
//             Referer를 사용해서 유입 경로 분석 가능
//             요청에서 사용

//         User-Agent : 유저 에이전트 애플리케이션 정보
//             클라이언트의 애플리케이션 정보(웹 브라우저 정보 등등)
//             통계 정보
//             어떤 종류의 브라우저에서 장애가 발생하는 지 파악 가능
//             요청에서 사용
        
//         Server : 요청을 처리하는 ORIGIN 서버의 소프트웨어 정보
//             응답에서 사용

//         Date : 메세지가 발생한 날짜와 시간
//             응답에서 사용

//     특별한 정보
//         Host : 요청한 호스트 정보(도메인)
//             필수이며, 요청에서 사용
//             하나의 서버가 여러 도메인을 처리해야 할 때
//             하나의 IP 주소에 여러 도메인이 적용되어 있을 때
//             > 가상 호스트 : 하나의 서버가 여러 애플리케이션이 다른 도메인으로 구동될 때
//                 IP로 통신하기 때문에 요청이 어느 애플리케이션으로 들어가야되는 지 구분할 방법이 없었다
//                 HOST 헤더를 통해서 애플리케이션을 구분한다

//         Location : 페이지 리다이렉션
//             웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면 자동으로 이동한다
//             201(Created) : Location 값은 요청에 의해 생성된 리소스 URI
//             3xx(Redirection) : Location 값은 요청을 자동으로 리다이렉션하기 위한 대상 리소스

//         Allow : 허용 가능한 HTTP 메소드
//             405(Method Not Allowed)에서 응답에 포함해야함
        
//         Retry-After : 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간 
//             503(Service Unavailable) : 서비스가 언제까지 불능인지 알려줄 수 있음
//             날짜나 초단위로 표기 가능함
        
//     인증 관련 헤더
//         Authorization: 클라이언트 인증 정보를 서버에 전달

//         WWW-Authenticate : 리소스 접근 시 필요한 인증 방법 정의
//             401 Unauthorized 응답과 함께 사용

//     쿠키
//         서버는 Stateless 프로토콜로 클라이언트와 서버가 요청과 응답을 주고 받으면 연결이 끊어지고
//         클라이언트가 다시 요청해도 서버는 이전 요청을 기억하지 못한다
//         > 모든 요청에 정보를 넘기는 문제가 발생한다
        
//         사용처 : 
//             사용자 로그인 세션 관리
//             > 로그인에 성공하면 서버는 세션키를 만들어서 db에 저장하고 SessionId라는 세션값을 클라이언트로 넘긴다 > 이를 통해 로그인 여부 확인
//             광고 정보 트래킹

//         쿠키 정보는 항상 서버에 전송됨
//             네트워크 트래픽 추가 유발
//             최소한의 정보만 사용(세션id, 인증 토큰)
//             서버에 전송하지 않고, 웹 브라우저 내부에 데이터를 저장하고 싶으면 웹 스토리지
        
//         보안에 민감한 데이터는 저장하면 안됨

//         Set-Cookie : 서버에서 클라이언트로 쿠키 전달(응답)
//             웹 브라우저가 내부 쿠키 저장소에 서버에게 받은 쿠키를 저장한다
//             로그인 이후 요청을 보낼 때 자동으로 쿠키 저장소에서 쿠키 값을 Cookie에 담아 보낸다
            
//         Cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청 시 서버로 전달
//             모든 요청에 쿠키 정보가 자동으로 포함
        
//         생명주기 Expires, max-age 
//             expires 만료일이 되면 쿠키 삭제
//             max-age 초단위를 세팅하고 시간이 지나거나 0이나 음수를 지정하면 쿠키 삭제
        
//         쿠키 종류
//             세션 쿠키 : 만료 날짜를 생략하면 브라우저 종료 시까지만 유지
//             영속 쿠키 : 만료 날짜를 입력하면 해당 날짜까지 유지

//         쿠키 도메인(Domain)
//             명시 : 명시한 문서 기준 도메인 + 서브 도메인 포함
//                 domain=example.org 지정하고 쿠키 생성
//                 dev.example.org도 쿠키 접근
//             생략 : 현재 문서 기준 도메인만 적용
//                 example.org에서 쿠키 생성하고 domain 지정 생략 시
//                 dev.example.org에서는 쿠키 접근 불가

//         쿠키 경로(Path) 
//             ex) path=/home
//             이 경로를 포함한 하위 경로 페이지만 쿠키 접근
//             일반적으로 path=/ 루트로 지정

//         쿠키 보안
//             Secure
//                 쿠키는 http, https 구분하지 않고 전송
//                 Secure 적용하면 httsp인 경우에만 전송
//             Httponly
//                 XSS 공격 방지
//                 자바스크립트 접근 불가
//                 HTTP 전송에서만 사용
//             SameSite
//                 XSRF 공격 방지
//                 요청 도메인과 쿠키에 설정된 도메인이 같은 경우에만 쿠키 전송

